import org.apache.tools.ant.filters.ReplaceTokens
import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

plugins {
    id 'groovy'
    id 'com.gradle.build-scan' version '1.16'
    id 'maven-publish' // Replacing Bintray with Maven publish
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/help/legal-terms-of-use'
    licenseAgree = 'yes'
}

sourceCompatibility = '17'
targetCompatibility = '17'

String userHome = System.getProperty('user.home')
ext.installBinDir = "${userHome}/.drman/bin"
ext.installSrcDir = "${userHome}/.drman/src"
ext.installHelperDir = "${userHome}/.drman/helper"
ext.installPluginsDir = "${userHome}/.drman/plugins"

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'local'
    ext.environment = environment
    println("Environment is set to: ${environment}")

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
    ext.config = config
}

loadConfiguration()

ext.buildNumber = System.getenv('TRAVIS_BUILD_NUMBER') ?: '0'
ext.drmanBuildVersion = "${config.drmanVersion}+${buildNumber}".toString()

repositories {
    mavenCentral() // Use Maven Central as the default repository
}

dependencies {
    testImplementation('com.github.tomakehurst:wiremock:2.25.1') {
        exclude(module: 'junit')
    }
    testImplementation('io.cucumber:cucumber-groovy:4.7.1')
    testImplementation('io.cucumber:cucumber-junit:4.7.4')
    testImplementation('io.cucumber:gherkin:5.2.0')
    testImplementation('junit:junit:4.13')
    testImplementation('org.codehaus.groovy:groovy:2.4.19')
    testImplementation('org.codehaus.groovy:groovy-json:2.4.19')
    testImplementation('org.codehaus.groovy:groovy-templates:2.4.19')
    testImplementation('org.slf4j:slf4j-api:1.7.30')
    testImplementation('org.slf4j:slf4j-simple:1.7.30')
    testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
        exclude(module: 'groovy-all')
    }
}

task prepareScripts(type: Copy) {
    from('src/main/bash')
    into('build/scripts')
    include('**/*')
    filter(
        ReplaceTokens,
        tokens: [
            DRMAN_VERSION: drmanBuildVersion,
            DRMAN_NAMESPACE: config.drmanNamespace,
            DRMAN_CANDIDATE_BRANCH: config.candidateBranch,
            DRMAN_CANDIDATE_REPO_VERSION: config.candidateRepoVersion,    
            DRMAN_CANDIDATES_API: config.candidatesApi
        ]
    )
}

task prepareHelperScripts(type: Copy) {
    from('helper')
    into('build/helper')
    include('*.sh')
}

task preparePluginScripts(type: Copy) {
    from('src/main/plugins')
    into('build/plugins')
    include('**/*')
}

tasks.test.configure {
    dependsOn(prepareScripts)
    testLogging.exceptionFormat = FULL
}

task assembleArchive(type: Zip, dependsOn: prepareScripts) {
    archiveVersion = drmanBuildVersion
    from('build/scripts')
    include('*.sh*')
}

tasks.assemble.configure {
    dependsOn(assembleArchive)
}

task cleanInstallInit(type: Delete) {
    delete(installBinDir)
}

task cleanInstallModules(type: Delete) {
    delete(installSrcDir)
}

task cleanInstallHelpers(type: Delete) {
    delete(installHelperDir)
}

task cleanInstallPlugins(type: Delete) {
    delete(installPluginsDir)
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
    from('build/scripts')
    into(installBinDir)
    include('drman-init.sh')
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
    from('build/scripts')
    into(installSrcDir)
    include('drman-*.sh')
    exclude('drman-init.sh')
}

task installHelperScripts(type: Copy, dependsOn: [cleanInstallHelpers, prepareHelperScripts]) {
    from('build/helper')
    into(installHelperDir)
    include('*.sh')
}

task installPluginScripts(type: Copy, dependsOn: [cleanInstallPlugins, preparePluginScripts]) {
    from('build/plugins')
    into(installPluginsDir)
    include('**/*')
}

task install(dependsOn: [installInit, installModules, installHelperScripts, installPluginScripts])

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            version = drmanBuildVersion
        }
    }
    repositories {
        maven {
            name = "YourRepository"
            url = uri("https://your.artifact.repository")
            credentials {
                username = System.getenv("REPO_USER")
                password = System.getenv("REPO_PASS")
            }
        }
    }
}
